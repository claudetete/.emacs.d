#title Emacs Features
#desc features in GNU/Emacs


; ;
; ; EMACS
<slide>
      **EMACS**
</slide>

<slide title="Emacs: Features already in Emacs">
 - Presentation of several features which are not always present in other text editor or IDE
 - slide order is not important the first thing is not the most important
 - don't panic about octopus shortcuts you will get used
</slide>

; interface
<slide title="Emacs: Split Screen 1/2">
 - split current frame as often as you want with horizontally "=Ctrl+x 2=", vertically "=Ctrl+x 3=", undo all split "=Ctrl+x 1="
 - increase/decrease size of frame (window for Emacs) with "=Alt+x enlarge-window ENTER=", "=Alt+x enlarge-window-horizontally ENTER=", "=Alt+x shrink-window ENTER=" or "=Alt+x shrink-window-horizontally ENTER="
</slide>

<slide title="Emacs: Split Screen 2/2">
[[./slide/split_windows.png][Split in four windows]]
</slide>

<slide title="Emacs: No Tab">
 - Emacs do not use tab but history of opened files (buffers for Emacs)
 - "=Ctrl+x=" "=Ctrl+b=" (for electric-buffer-list) or ECB history or "=Ctrl+Left Click=" to open context menu
[[./slide/history_buffer.png][ECB History (bottom-left), Buffer List (top-right) and Context Menu]]
</slide>

<slide title="Emacs: Highlight current line">
[[./slide/highlight_line.png][The highlight current line in center]]
</slide>

<slide title="Emacs: Command Completion/search or Minibuffer">
 - minibuffer is a tiny buffer at bottom where each complicated command are edited/displayed
 - call a command with "=Alt+x myfunction ENTER="
 - it support completion for function or file with "=TAB=" and standard completion with "=Alt+/=" like in other buffers
 - search in history forward with "=Ctrl+s=" or "=Alt+s=" and backward with "=Ctrl+r=" "=Alt+r="
[[./slide/minibuffer.png][minibuffer when invoke a command "M-x myfunction"]]
</slide>

<slide title="Emacs: Transparency">
 - the whole window can be transparent (you can add custom function to toggle between transparency and opaque
[[./slide/transparency.png][Emacs in front of GNU Emacs home page]]
</slide>

<slide title="Emacs: Recenter, Top, Bottom">
 - scroll to have the current line at center with "=Ctrl+l=" (the current line will become the center line in the window)
 - scroll to have the current line at top with "=Ctrl+l Ctrl+l=" (the current line will become the top line in the window)
 - scroll to have the current line at bottom with "=Ctrl+l Ctrl+l Ctrl+l=" (the current line will become the bottom line in the window)
</slide>

<slide title="Emacs: Limit editing to a Narrow Region">
 - limit editing to a narrow selected region with "=Ctrl+x n n="
 - only this region is accessible, the rest can not be modified or see, so it can not be tampered
 - it's not gone, if you save the file it will be also saved
 - remove narrowing, and the entire buffer is accessible with "=Ctrl+x n w="
 - limit editing to the current function with "=Ctrl+x n d="
</slide>

; move
<slide title="Emacs: Move by paragraph/word/expression">
 - move from word to word with "=Ctrl+LEFT/RIGHT="
 - move from empty line to empty line (between paragraph/block) with "=Ctrl+UP/DOWN="
 - move from function beginning to ending with "=Ctrl+Shift+HOME/END="
 - move to preprocessing beginning with "=Ctrl+c Ctrl+u="
 - switch to *move from word to word* to *move from subword to subword* (place at CapitalLetterInThisWord) with "=Ctrl+c Ctrl+w="
 - and more about parentheses/bracket or source code block or sentence
</slide>

<slide title="Emacs: Selection with or without Shift">
 - put a mark "=Ctrl+SPACE=" (do not hold it) and move to select something
 - select the whole current block with "=Alt+h="
 - select the whole function with "=Ctrl+Alt+h="
 - use keep "=Shift=" press and move (or with mouse)
[[./slide/select_region.png][A region is selected]]
</slide>

<slide title="Emacs: Delete by word/block">
 - remove all empty line except one "=Ctrl+x Ctrl+o="
 - remove all space except one "=Alt+SPACE="
 - delete word left "=Alt+BACKSPACE=" or "=Ctrl+BACKSPACE="
 - delete word right "=Alt+d="
</slide>

<slide title="Emacs: Add/Remove Parentheses">
 - around a selection with parentheses with "=Alt+(="
 - remove a pair of parentheses with "=Alt+x delete-pair ENTER="
</slide>

<slide title="Emacs: Alignment">
 - align declaration, parameters of functions with "=Alt+x align ENTER=" (following the current languages)
 - align anything with regex with "=Alt+x align-regexp ENTER="
[[./slide/align_before.png][Before]]
[[./slide/align_after.png][After "Alt+x align ENTER"]]
</slide>

<slide title="Emacs: Up/Down Case">
 - upcase a right word with "=Alt+U="
 - upcase a selected region with "=Ctrl+x Ctrl+u="
 - downcase a right word with "=Alt+l="
 - downcase a selected region with "=Ctrl+x Ctrl+l="
 - upcase first character and downcase others with "=Alt+c="
</slide>

<slide title="Emacs: Remove All Useless Space">
 -automatically remove all trailing space when you save with "=(add-hook 'write-file-hooks 'delete-trailing-whitespace)=" in you setting
</slide>

<slide title="Emacs: Justify Plain Text">
 - justify a paragraph/block of text with "=Alt+q=" (without select it)
 - justify a selected region with "=Alt+x fill-region ENTER="
 - center a line with "=Alt+o Alt+s="
 - the right margin is define by the variable "=fill-column=", change it with "=Ctrl+x f="
</slide>

; search
<slide title="Emacs: Incremental Search">
 - start an forward incremental search with "=Ctrl+s=", regex with "=Ctrl+Alt+s="
 - backward incremental search with "=Ctrl+r=", regex with "=Ctrl+Alt+r="
 - last searched in forward with "=Ctrl+s Ctrl+s=" same for backward "=Ctrl+r Ctrl+r=", search in history "=Ctrl+s ENTER Alt+r=", etc
 - during incremental search, select to the end of the word with "=Ctrl+w=", paste with "=Alt+y=", case sensitive with "=Alt+c=", start query replace with "=Alt+%="
 - the incremental search highlight all matches in the buffer
 - any keys to move will close incremental search
 - incremental search can be very useful to move in a buffer, even during selection
</slide>

<slide title="Emacs: Occurrences">
 - search each occurrences of a regex with "=Alt+s o="
 - you can navigate to the next or previous match with "=Alt+g Alt+n=" and "=Alt+g Alt+p=" (if you want use them I recommend to rebind them like "=F3=" "=Shift+F3=")
 - to refresh with "=g=" when in * Occur* buffer
[[./slide/occur.png][Search occurrences of "emacs"]]
</slide>

<slide title="Emacs: Replace Query">
 - query replace without regex with "=Alt+%="
 - query replace with regex with "=Ctrl+Alt+%="
[[./slide/query.png][Query replacing "emacs" with "vim"]]
</slide>

<slide title="Emacs: Replace on a selected region">
 - replace without regex with "=Alt+x replace-string ENTER="
 - replace with regex with "=Alt+x replace-regexp ENTER="
 - it replace only in the selected region and do not interact with rest of the buffer
</slide>

<slide title="Emacs: Highlight">
 - highlight any text with regex with "=Alt+s h r="
 - the highlight will continue until you unhighlight with "=Alt+s h u=" or close the buffer with "=Ctrl+x k="
[[./slide/highlight.png][Highlight "emacs" with yellow highlight]]
</slide>

<slide title="Emacs: Parentheses Match">
 - highlight automatically current parenthesis and its matching when you put the cursor on a parenthesis
 - it work for for parenthesize, square bracket and curly bracket
[[./slide/parenthese.png][Parentheses match]]
</slide>

<slide title="Emacs: Find File">
 - search recursively with pattern a file and open it with "=Alt+x find-name-dired ENTER="
</slide>

; cut/copy/paste
<slide title="Emacs: Advanced Clipboard (Kill Ring)">
 - cut (save & kill in Emacs) a selected region with "=Ctrl+w=" the text will be put in a ring memory called "kill ring"
 - copy (save without kill in Emacs) a selected region with "=Alt+w=" the text will also be put in the kill ring
 - paste (yank in Emacs) the head of the kill ring with "=Ctrl+y="
 - navigate in history of kill ring with "=Alt+y=" and will be the new head of the kill ring (only after a "=Ctrl+y=")
 - some delete will be put in kill ring: delete word "=Alt+BACKSPACE=" or "=Ctrl+BACKSPACE=" and "=Alt+d="
 - cut rest of line with "=Ctrl+k="
</slide>

; languages
<slide title="Emacs: Indentation">
 - indentation depend of the current language of the file
 - all settings can be modify, tab vs space, number of space, etc
 - indent correctly current line with "=TAB=" (cursor can be anywhere on the line)
 - indent a selected region with "=Ctrl+Alt+\="
 - merge previous line and current without indentation with "=Alt+^="
 - split the current line and align new line with cursor with "=Ctrl+Alt+o="
 - insert spaces like tabulation with "=Alt+i="
</slide>

<slide title="Emacs: Folding or Hide/Show Block">
 - hide block of preprocessing with "=Ctrl+c @ Ctrl+d="
 - show block of preprocessing with "=Ctrl+c @ Ctrl+s="
[[./slide/hs_show.png][Before]]
[[./slide/hs_hide.png][Hidden block (after)]]
</slide>

<slide title="Emacs: Compile">
 - you can compile in Emacs with "=Alt+x compile ENTER=" and customize the line of compilation
 - it will open a new buffer which contains output of compiler
 - with gcc you can jump directly to the line in source code which cause error, use next (with "=Alt+g n=") and previous (with "=Alt+g p="), etc
 - ECB mode can control the buffer of compile to show/hide it like a quake console
</slide>

<slide title="Emacs: Completion (dumb)">
 - a (not so) dumb completion are already in Emacs with "=Alt+/="
 - it will complete the word with the last word type or used and also with all around in the current buffer and after with all word in others opened buffer
 - just type again "=Alt+/=" to navigate in the completion list
</slide>

; misc
<slide title="Emacs: Information">
 - Count number of character and line in a selected region with "Alt+ <literal>=</literal>"
 - Information about a character with "Ctrl+x <literal>=</literal>"
 - line and column number in status bar of current buffer (modeline in Emacs)
[[./slide/information.png][Information about a selected region and line and column number of cursor]]
</slide>

<slide title="Emacs: Undo">
 - undo the last modification with "=Ctrl+_="
 - undo can be done until the moment file was opened, even after multiple save
 - undo is a command which is put at the head of the stack of "undo" so to redo the undo use the same shortcut that the reason why there is not "redo" function
</slide>

<slide title="Emacs: Macro">
 - start a macro recording with "=Ctrl+x (="
 - end a macro recording with "=Ctrl+x )="
 - run a macro with "=Ctrl+x e="
 - run a macro on a selected region with "=Ctrl+x Ctrl+k r="
 - start a macro recording by starting with last macro with "=C-u C-x (=" (it ends like a standard macro recording)
 - name a macro with "=Alt+x name-last-kbd-macro ENTER="
 - insert macro to save it in emacs setting file with "=Alt+x insert-kbd-macro ENTER="
 - run a named macro with "=Alt+x macro-name ENTER=" or set a keyboard shortcuts
</slide>

<slide title="Emacs: Buffer Point Register">
 - set a point bookmark into a register with "=Ctrl+x r SPACE=" (and a key)
 - jump to a point bookmark from a register with "=Ctrl+x r j=" (and a key)
 - a register is a memory combined with a key
</slide>

<slide title="Emacs: Version Control Integration">
 - generic command exist for version control in Emacs, the mode provides an interface between this generic command and a version control
 - appropriate next operation with "=Ctrl+x v v="
 - add a new file with "=Ctrl+x v i="
 - update with "=Ctrl+x v +="
 - diff with "Ctrl+x v <literal>=</literal>"
 - merge with "=Ctrl+x v m="
 - ...
</slide>

<slide title="Emacs: Calculator">
 - invoke a calculator with "=Ctrl+x * c="
 - invoke a quick calculator only in minibuffer with "=Ctrl+x * q="
 - grab a selected region, compute and paste the results with "=Ctrl+x * e="
 - grab a selected rectangle and sum the columns with "=Ctrl+x * :="
 - grab a selected rectangle and sum the rows with "=Ctrl+x * _="
 - last result can be reuse with "=$=" (results are provided in decimal, hexa, octal, binary and ascii)
 - in base N prefix with "=N#="
 - paste value in buffer with "=y="
 - quit calculator with "=Ctrl+x * x="
</slide>

<slide title="Emacs: Calendar">
 - A calendar, with diary with "=Alt+x calendar="
 - if you set you latitude and longitude you can have sunset, zenith, sunrise (with "=S=") and moon phase (with "=M=")
 - the diary can be synchronize with some mode
[[./slide/calendar.png][a window with Calendar]]
</slide>

<slide title="Emacs: Mouse Avoidance">
 - when you start to type, the mouse cursor will move away:
   - at a given position "=(mouse-avoidance-mode 'banish)="
   - just do not cover text at keyboard cursor "=(mouse-avoidance-mode 'jump)="
   - some exotics "=animate, exile, proteus="
</slide>

<slide title="Emacs: Word Wrap">
 - truncate lines to show the whole line but on multiple rows
 - it can be confusing but when you scroll down/up, nothing is hidden
 - a symbol signals a truncate line at each return
[[./slide/truncate.png][A long truncated line]]
</slide>

<slide title="Emacs: Backup File">
 - each saved file are backup (by default "=myfile.c~=" in file directory)
 - an auto save is enable (by default "=#myfile.c#=" in file directory)
 - backup/auto-save file can be put in an unique folder
 - backup/auto-save file can be save by date, location, etc
</slide>

<slide title="Emacs: Dictionary">
 - a speller can be used (ispell mode, with Aspell tool)
 - it can complete a word with "=Alt+Tab=", check spelling with "=Alt+$="
 - multiple languages are supported
</slide>

<slide title="Emacs: Scroll Acceleration">
 - scrolling down/up with mouse wheel has acceleration (like when you move the mouse cursor)
 - with a long quickly scroll you can go to the top or bottom of file
</slide>

<slide title="Emacs: Repeat Command">
 - repeat anything with "=Ctrl+NUMBER=" or "=Ctrl+u NUMBER="
 - by example :
   - jump eleven bottom line with "=Ctrl+1 Ctrl+1 DOWN=" or "=Ctrl+u 11 DOWN=",
   - insert eighty "=#=" with "=Ctrl+8 Ctrl+0 #=" or "=Ctrl+u 80 #="
   - etc
 - "=0=" means infinite until first error
 - it is also used when a function has a number parameter
</slide>

<slide title="Emacs: Status Bar or Modeline">
 - it can display file rights, encoding, line number, column number, position in file, file size, major and minor mode (languages, etc), date and time...
[[./slide/modeline.png][An example of Modeline]]
</slide>

; column
<slide title="Emacs: Column Mode or Rectangle">
 - to select a rectangle do same as selected region but start and end of region is top-left and bottom-right of rectangle
 - overwrite a rectangle with same string on each line with "=Ctrl+x r t="
 - delete a rectangle with "=Ctrl+x r d="
 - copy a selected rectangle in a register with "=Ctrl+x r r="
 - paste a rectangle from register with "=Ctrl+x r i="
 - insert a rectangle of space with "=Ctrl+x r o="
</slide>

<slide title="Emacs: Yet Another Column Mode or CUA Selection 1/3">
 - CUA (Common User Access) set up shortcuts like Cut "Ctrl+x", Copy "Ctrl+c", Paste "Ctrl+v" and Undo "Ctrl+z"
 - CUA Selection add features from CUA mode without the common shortcuts
 - start a column selection with "=Ctrl+ENTER=" and insert anything by column
 - overwrite a selected rectangle with same string on each line with "=Alt+s=" (during column selection)
 - delete (kill in Emacs) a selected rectangle with "=Alt+k=" (during column selection)
 - insert a rectangle of space with "=Alt+o=" (during column selection)
</slide>

<slide title="Emacs: Yet Another Column Mode or CUA Selection 2/3">
 - copy a selected rectangle with "=Alt+m=" (during column selection)
 - replace with regex in a selected rectangle with "=Alt+r=" (during column selection)
 - invert line order in a selected rectangle with "=Alt+R=" (during column selection)
 - restrict a selected rectangle to line matching with regex with "=Alt+/=" (during column selection)
 - upcase the selected rectangle with "=Alt+u=" (during column selection)
</slide>

<slide title="Emacs: Yet Another Column Mode or CUA Selection 3/3">
 - downcase the selected rectangle with "=Alt+l="  (during column selection)
 - more command with "=Ctrl+?=" (during column selection)
[[./slide/cua_rectangle.png][A selected rectangle (highlight in pink) in CUA mode]]
</slide>

<slide title="Emacs: minor Column Mode">
 - a minor column mode where the cursor is jumping always on the same column
 - set the column goal with "=Ctrl+x Ctrl+n=" it will take the current column as goal
 - every time the cursor is moving on a line (Up/Down arrow) it will jump one the selected column
 - you can add/remove more easily with a goal column without using home/end left/right keys
 - unset the column goal with "=Ctrl+u Ctrl+x Ctrl+n="
</slide>

; dired
<slide title="Emacs: Integrated Explorer or Dired 1/3">
 - explorer (dired in Emacs) is a buffer so can be manage like others
 - open it with "=Ctrl+x d=" or "=Ctrl+x Ctrl+f directory-name=" ("=Ctrl+x Ctrl+f=": open a file so one shortcut for 2 features)
 - when in dired mode:
   - copy with "=C=", rename with "=R="
   - mark to delete with "=d=", unmark to delete with "=u=", apply modification with "=x="
   -  create a directory with "=+=", change rights with "=M="
   - refresh with "=g=", refresh the current file with "=l="
   - mark many file to be delete with regex with "=% d=" (during dired mode)
</slide>

<slide title="Emacs: Integrated Explorer or Dired 2/3">
 - when dired mode
   - mark current file with "=m=", mark all file with "=* s="
   - remove all marks with "=U=", toggle all marked file with "=t="
   - mark many file with regex with "=% m="
   - upcase all marked file with "=% u=", downcase all marked file with "=% l="
 - incremental search can be invoke to point on a file
</slide>

<slide title="Emacs: Integrated Explorer or Dired 3/3">
   - edit directly in dired buffer, filename, group, users, rights with "=Ctrl+x Ctrl+q=", apply modification with "=Ctrl+c Ctrl+c="
[[./slide/dired.png][Dired mode with some file marked and marked to delete]]
</slide>

<slide title="Emacs: Bookmarks">
 - file or directory can be bookmarked
 - bookmark current file or directory with "=Ctrl+x r m="
 - invoke list of bookmarks with "=Ctrl+x r l="
 - mark to delete a bookmark with "=d=" (in bookmark list)
 - edit annotations with "=e=" (in bookmark list)
 - show annotations with "=a=" (in bookmark list)
 - apply all modifications with "=x=" (in bookmark list)
</slide>

; help
<slide title="Emacs: Help 1/2">
 - Emacs help is pleasant like an old lady, she talks a lot and gives arcane answer
 - start help about emacs with "=Ctrl+h r="
 - start help about help with "=Ctrl+h i="
 - a tutorial to start with emacs with "=Ctrl+h t="
 - in help
   - go back with "=l=", go up with "=u=", go top with "=t=", go previous with "=r="
   - go next topic with "=n=", go previous topic with "=p="
   - go to a node with "=m=",
</slide>

<slide title="Emacs: Help 2/2">
 - help about a shortcut with "=Ctrl+h k=" and the shortcut
 - help about anything with "=Ctrl+h a="
 - help about the shortcut of a function with "=Ctrl+h w=" and the function
 - help about a function with "=Ctrl+h f=" and the function
 - help about a variable with "=Ctrl+h v=" and the variable
 - last 100 keys with "=Ctrl+h l="
</slide>

; custom
<slide title="Emacs: Shortcuts with Windows and Menu keys">
 - every keys can be customize to be bound to a function
 - the windows key or the menu keys (right after the right windows keys) can be used like extra modifier key (like Ctrl, Alt or Shift), called **Super** and **Hyper** in Emacs
 - it can be useful to avoid shortcut like this one "=Ctrl+u Ctrl+x Ctrl+f=" which can replace with "=Hyper+f="
</slide>

<slide title="Emacs: Customization 1/2">
 - everything can be customize in Emacs "=Alt+x customize ENTER=":
   - font: size, color (different for each mode/buffer/window)
   - window decoration toolbar, menubar. scrollbar
   - shortcuts: you can bind everything to anything
   - new functions/mode: you can extend Emacs by scripting it (in Emacs Lisp)
   - a lot of function or mode already exists on the web, just dig
</slide>

<slide title="Emacs: Customization 2/2">
 - every settings or customization are put in text file (like ".emacs" file)
 - so it very easy to share/try/copy a setting or a new function
[[./slide/customization.png][Customization of group Convenience]]
</slide>


; ;
; ; MODE
<slide>
      **MODE**
</slide>

<slide title="Mode: Extensions/Add-on">
 - extensions or add-on are named Mode in Emacs (like "=c-mode=", "=asm-mode=", "=tool-bar-mode=", ...)
 - modes are written in Emacs lisp (source in .el file and compile in .elc file)
 - a lot of modes are already in Emacs some other can be found on the web
 - there are two type of mode:
   - major: language or task specific, given in modeline (only one at a given time)
   - minor: small features (multiple minor can be invoke)
 - the following list is just an insight of Emacs modes
</slide>

<slide title="Mode: CEDET/EDE/Semantic/Completion 1/2">
 - CEDET is a "=Collection of Emacs Development Environment Tools=" which contains:
   - EDE: a manager of project, generic or with GNU Global or with autotools
   - Semantic: a parser conjugated with a database for all functions, variable, symbols...
   - Completion: smart for oriented object languages
   - Senator: to move from file to file in a project
 - this mode is use by ECB mode
</slide>

<slide title="Mode: CEDET/EDE/Semantic/Completion 2/2">
 - parse the current buffer with "=Ctrl+c , ,="
 - jump to definition of symbol with "=Ctrl+c , j="
 - open include file with "=Ctrl+c , u="
 - find all calls of current function with "=Ctrl+c , G="
</slide>

<slide title="Mode: ECB 1/3">
 - ECB is an "=Emacs Code Browser=" which contains:
   - directory list frame
   - source list frame
   - method/function frame
   - history list frame
   - a quake like window but bottom for compile/grep/custom...
 - all list in each frame can be filtered with regex
 - different layout for all frame
 - need CEDET to work
</slide>

<slide title="Mode: ECB 2/3">
 - Example of a layout in the screenshot in Part 3/3
<src>
+-----------+----------------+
| Directory |                |
+-----------+                |
|  Sources  |                |
+-----------+  File emacs.c  |
|  Methods  |                |
+-----------+                |
|  History  |                |
+-----------+----------------+
|  Compile/Grep/Customize    |
+----------------------------+
</src>
</slide>

<slide title="Mode: ECB 3/3">
[[./slide/ecb.png][Example of layout]]
</slide>

<slide title="Mode: Gtags">
 - GNU Global mode for tags and to manage project file
 - jump to definition
 - search symbol in all project file (tags with grep)
 - search file in project
 - can be use by CEDET mode
</slide>

<slide title="Mode: Which function">
 - minor mode to show in modeline the current function
[[./slide/which_function.png][show function abort() in cyan]]
</slide>

<slide title="Mode: Dired+ And Dired Sort">
 - add color to dired mode
 - sort like in MS Windows Explorer
 - open with default program
</slide>

<slide title="Mode: Packages Repository">
 - add a manager of repositories (like in Linux distribution)
 - each repositories contain packages
 - a package is a mode for Emacs which can be download and install
[[./slide/packages.png][insight of packages list]]
</slide>

<slide title="Mode: Home End">
 - a minor mode to add features to the "=HOME=" and "=END=" keys
 - "=HOME=" and "=END=" keys have normally behavior
 - go to the top/bottom of screen with "=HOME HOME="/"=END END="
 - go to the top/bottom of buffer/file with "=HOME HOME HOME="/"=END END END="
</slide>

<slide title="Mode: Syntax Coloration">
 - a mode exists for a lot of languages, just search on the web
</slide>

<slide title="Mode: Highlight Current Symbol">
 - idle two seconds on a symbol/word and all similar symbol/word will be highlight
</slide>

<slide title="Mode: Google Calendar">
 - synchronize Emacs Calendar and Diary with Google Calendar
</slide>

<slide title="Mode: Column Indicator">
 - show a thin line at a column to ease editing
</slide>

<slide title="Mode: Produce Document">
 - Muse mode can produce document from plain text
   - wiki
   - pdf
   - presentation (**like this one**)
   - blog
</slide>

<slide title="Mode: Undo Tree Mode">
 - show undo like a tree with "=Ctrl+x u="
 - move in the tree to see undo/redo on the file
[[./slide/undo_tree.png][Undo tree to navigate in modifications]]
</slide>

<slide title="Mode: org mode">
 - a mode to organize in plain text
   - keeping notes
   - maintaining ToDo lists
   - project planning
   - publish document
</slide>

<slide title="Mode: Parentheses Match not visible">
 - when try to match a parentheses not visible display in minibuffer the match and line after
</slide>

<slide title="Mode: Color Theme 1/3">
[[./slide/color_emacs.png][Default Colors without Color Theme mode]]
</slide>

<slide title="Mode: Color Theme 2/3">
[[./slide/color_zenburn.png][Zenburn Color Theme (a ported Vim color scheme)]]
</slide>

<slide title="Mode: Color Theme 3/3">
[[./slide/color_sweet.png][Sweet Color Theme (mine)]]
</slide>


; ;
; ; CUSTOM
<slide>
      **CUSTOMIZE**
</slide>

<slide title="Customize: example 1/2">
 Some example of customization, new function:
 - word/symbol incremental search under cursor (at point)
 - manage setting profiles (my configuration)
 - select word/symbol under cursor (at point)
 - word/symbol occurrences under cursor (at point)
 - toggle width of ECB mode window (change layout)
 - search TAB character
 - integration with graphical clearcase (checkout, history, compare)
</slide>

<slide title="Customize: example 2/2">
 Some example of customization, settings:
 - ignore insert key
 - never dialog box
 - never tooltips
 - filter/group ECB windows (source/directory/method...)
   - do not show hidden folder
   - do not show compiled file
   - group C file, Lisp file,
   - group file from an include folder
   - ...
</slide>

